{"ast":null,"code":"var _jsxFileName = \"/Users/kiliandreher/connection-cards/src/container/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CardDeck from '../components/CardDeck';\nimport questions from './questions.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [shownIndices, setShownIndices] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(() => getRandomQuestion(shownIndices));\n  const [lastQuestion, setLastQuestion] = useState(null);\n  function getRandomQuestion(currentShownIndices) {\n    if (currentShownIndices.length === questions.length) {\n      // If all questions have been shown, reset the shownIndices\n      setShownIndices([]);\n      currentShownIndices = [];\n    }\n    let randomIndex;\n    do {\n      randomIndex = Math.floor(Math.random() * questions.length);\n    } while (currentShownIndices.includes(randomIndex)); // Ensure the question hasn't been shown yet\n\n    setShownIndices(prevIndices => [...prevIndices, randomIndex]);\n    return questions[randomIndex];\n  }\n  const handleCardClick = () => {\n    setLastQuestion(currentQuestion); // Set the last question before getting a new one\n    setCurrentQuestion(getRandomQuestion(shownIndices));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center min-h-screen bg-gray-100 p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-4 text-center\",\n      children: \"Connection Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-6 text-xl text-center\",\n      children: \"Play a game of genuine connection.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow flex items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: handleCardClick,\n        children: /*#__PURE__*/_jsxDEV(CardDeck, {\n          currentQuestion: currentQuestion,\n          lastQuestion: lastQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-6 text-xl text-center\",\n      children: \"Pull a card and ask your partner a question.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"07ERHapLPcPYVuSoPv54S8MHK8s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CardDeck","questions","jsxDEV","_jsxDEV","App","_s","shownIndices","setShownIndices","currentQuestion","setCurrentQuestion","getRandomQuestion","lastQuestion","setLastQuestion","currentShownIndices","length","randomIndex","Math","floor","random","includes","prevIndices","handleCardClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/kiliandreher/connection-cards/src/container/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CardDeck from '../components/CardDeck';\nimport questions from './questions.js';\nimport './App.css';\n\nfunction App() {\n  const [shownIndices, setShownIndices] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(() => getRandomQuestion(shownIndices));\n  const [lastQuestion, setLastQuestion] = useState(null);\n\n  function getRandomQuestion(currentShownIndices) {\n    if (currentShownIndices.length === questions.length) {\n      // If all questions have been shown, reset the shownIndices\n      setShownIndices([]);\n      currentShownIndices = [];\n    }\n\n    let randomIndex;\n    do {\n      randomIndex = Math.floor(Math.random() * questions.length);\n    } while (currentShownIndices.includes(randomIndex)); // Ensure the question hasn't been shown yet\n\n    setShownIndices(prevIndices => [...prevIndices, randomIndex]);\n    return questions[randomIndex];\n  }\n\n  const handleCardClick = () => {\n    setLastQuestion(currentQuestion); // Set the last question before getting a new one\n    setCurrentQuestion(getRandomQuestion(shownIndices));\n  };\n\n  return (\n    <div className='flex flex-col items-center min-h-screen bg-gray-100 p-8'>\n        <h1 className='text-3xl font-bold mb-4 text-center'>Connection Cards</h1>\n        <p className='mb-6 text-xl text-center'>Play a game of genuine connection.</p>\n        <div className='flex-grow flex items-center'>\n          <div onClick={handleCardClick}>\n            <CardDeck currentQuestion={currentQuestion} lastQuestion={lastQuestion} />\n          </div>\n        </div>\n        <p className='mb-6 text-xl text-center'>Pull a card and ask your partner a question.</p>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,MAAMW,iBAAiB,CAACJ,YAAY,CAAC,CAAC;EAC7F,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEtD,SAASW,iBAAiBA,CAACG,mBAAmB,EAAE;IAC9C,IAAIA,mBAAmB,CAACC,MAAM,KAAKb,SAAS,CAACa,MAAM,EAAE;MACnD;MACAP,eAAe,CAAC,EAAE,CAAC;MACnBM,mBAAmB,GAAG,EAAE;IAC1B;IAEA,IAAIE,WAAW;IACf,GAAG;MACDA,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGjB,SAAS,CAACa,MAAM,CAAC;IAC5D,CAAC,QAAQD,mBAAmB,CAACM,QAAQ,CAACJ,WAAW,CAAC,EAAE,CAAC;;IAErDR,eAAe,CAACa,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAEL,WAAW,CAAC,CAAC;IAC7D,OAAOd,SAAS,CAACc,WAAW,CAAC;EAC/B;EAEA,MAAMM,eAAe,GAAGA,CAAA,KAAM;IAC5BT,eAAe,CAACJ,eAAe,CAAC,CAAC,CAAC;IAClCC,kBAAkB,CAACC,iBAAiB,CAACJ,YAAY,CAAC,CAAC;EACrD,CAAC;EAED,oBACEH,OAAA;IAAKmB,SAAS,EAAC,yDAAyD;IAAAC,QAAA,gBACpEpB,OAAA;MAAImB,SAAS,EAAC,qCAAqC;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzExB,OAAA;MAAGmB,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EAAC;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC9ExB,OAAA;MAAKmB,SAAS,EAAC,6BAA6B;MAAAC,QAAA,eAC1CpB,OAAA;QAAKyB,OAAO,EAAEP,eAAgB;QAAAE,QAAA,eAC5BpB,OAAA,CAACH,QAAQ;UAACQ,eAAe,EAAEA,eAAgB;UAACG,YAAY,EAAEA;QAAa;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNxB,OAAA;MAAGmB,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EAAC;IAA4C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvF,CAAC;AAEV;AAACtB,EAAA,CAtCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}